const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
const recognition = new SpeechRecognition();

recognition.lang = 'vi-VN';
recognition.continuous = false;
recognition.interimResults = false;

let isListening = false;

function toggleMic() {
  if (!isListening) {
    try {
      recognition.start();
      isListening = true;
      micButton.innerText = "üõë T·∫Øt micro";
    } catch (err) {
      console.error("L·ªói khi start:", err);
    }
  } else {
    recognition.stop();
    isListening = false;
    micButton.innerText = "üé§ B·∫≠t micro";
  }
}

recognition.onresult = (event) => {
  const transcript = event.results[0][0].transcript.toLowerCase();
  console.log("üé§ B·∫°n n√≥i:", transcript);

  const mainContent = document.querySelector(".main-content");
  const posts = document.querySelectorAll(".post");
  if (transcript.includes("xu·ªëng")) {
    mainContent.scrollBy({ top: 300, behavior: 'smooth' });
  } else if (transcript.includes("l√™n")) {
    mainContent.scrollBy({ top: -300, behavior: 'smooth' });
  } else if (transcript.includes("l√™n ƒë·∫ßu trang")) {
    mainContent.scrollTo({ top: 0, behavior: 'smooth' });
  } else if (transcript.includes("xu·ªëng cu·ªëi trang")) {
    mainContent.scrollTo({ top: mainContent.scrollHeight, behavior: 'smooth' });
  } else if (transcript.includes("ƒë·ªïi giao di·ªán")) {
    document.body.classList.toggle("dark");
  } else if (transcript.includes("th√≠ch")) {
    const visiblePosts = [];

    handleCommentVoiceCommand(transcript, posts);

    posts.forEach(post => {
        const rect = post.getBoundingClientRect();
        const isVisible = rect.top < window.innerHeight && rect.bottom > 0;
        if (isVisible) {
        visiblePosts.push({ post, top: rect.top });
        }
    });

    visiblePosts.sort((a, b) => a.top - b.top); // S·∫Øp x·∫øp theo v·ªã tr√≠ hi·ªÉn th·ªã

    const numberWords = {
        "m·ªôt": 1,
        "hai": 2,
        "ba": 3,
        "b·ªën": 4,
        "nƒÉm": 5,
        "s√°u": 6,
        "b·∫£y": 7,
        "t√°m": 8,
        "ch√≠n": 9,
        "m∆∞·ªùi": 10
    };

    let index = -1;

    // N·∫øu c√≥ nhi·ªÅu b√†i ‚Üí t√¨m s·ªë th·ª© t·ª±
    if (visiblePosts.length > 1) {
        for (const [word, num] of Object.entries(numberWords)) {
        if (transcript.includes(word)) {
            index = num - 1;
            break;
        }
        }

        if (index === -1) {
        const match = transcript.match(/\b(\d+)\b/);
        if (match) {
            index = parseInt(match[1], 10) - 1;
        }
        }
    } else {
        index = 0; // ch·ªâ c√≥ 1 b√†i ‚Üí ch·ªçn lu√¥n
    }

    // Th·ª±c hi·ªán th√≠ch n·∫øu t√¨m ƒë∆∞·ª£c b√†i h·ª£p l·ªá
    if (index >= 0 && index < visiblePosts.length) {
        const likeBtn = visiblePosts[index].post.querySelector(".like-btn");
        likeBtn.innerHTML = '<i class="fa-solid fa-heart" style="color: red;"></i> ƒê√£ th√≠ch';
    }
    } else if (transcript.includes("b·ªè th√≠ch")) {
    const visiblePosts = [];
    posts.forEach(post => {
      const rect = post.getBoundingClientRect();
      const isVisible = rect.top < window.innerHeight && rect.bottom > 0;
      if (isVisible) visiblePosts.push({ post, top: rect.top });
    });
    visiblePosts.sort((a, b) => a.top - b.top);

    const numberWords = {
      "m·ªôt": 1, "hai": 2, "ba": 3, "b·ªën": 4, "nƒÉm": 5,
      "s√°u": 6, "b·∫£y": 7, "t√°m": 8, "ch√≠n": 9, "m∆∞·ªùi": 10
    };

    let index = -1;

    if (visiblePosts.length > 1) {
      for (const [word, num] of Object.entries(numberWords)) {
        if (transcript.includes(word)) {
          index = num - 1;
          break;
        }
      }

      if (index === -1) {
        const match = transcript.match(/\b(\d+)\b/);
        if (match) index = parseInt(match[1], 10) - 1;
      }
    } else {
      index = 0;
    }

    if (index >= 0 && index < visiblePosts.length) {
      const likeBtn = visiblePosts[index].post.querySelector(".like-btn");
      likeBtn.innerHTML = '<i class="fa-regular fa-heart"></i> Th√≠ch';
    }
  }
    
};

recognition.onend = () => {
  if (isListening) {
    setTimeout(() => {
      try {
        recognition.start();
      } catch (err) {
        console.error("Kh√¥ng th·ªÉ start l·∫°i:", err);
      }
    }, 300);
  }
};

recognition.onerror = (event) => {
  console.error("‚ùå L·ªói:", event.error);
  alert("L·ªói micro: " + event.error);
  isListening = false;
  micButton.innerText = "üé§ B·∫≠t micro";
};
document.querySelectorAll(".like-btn").forEach(button => {
  button.addEventListener("click", () => {
    const isLiked = button.innerHTML.includes("fa-solid");

    if (isLiked) {
      // N·∫øu ƒë√£ th√≠ch ‚Üí ƒë·ªïi l·∫°i ch∆∞a th√≠ch
      button.innerHTML = '<i class="fa-regular fa-heart"></i> Th√≠ch';
    } else {
      // N·∫øu ch∆∞a th√≠ch ‚Üí ƒë·ªïi sang ƒë√£ th√≠ch
      button.innerHTML = '<i class="fa-solid fa-heart" style="color: red;"></i> ƒê√£ th√≠ch';
    }
  });
});

document.querySelectorAll(".comment-btn").forEach(button => {
  button.addEventListener("click", () => {
    const post = button.closest(".post");
    const commentSection = post.querySelector(".comment-section");

    // ·∫®n c√°c khung b√¨nh lu·∫≠n kh√°c (n·∫øu mu·ªën ch·ªâ m·ªü 1 c√°i t·∫°i 1 th·ªùi ƒëi·ªÉm)
    document.querySelectorAll(".comment-section").forEach(sec => {
      if (sec !== commentSection) sec.style.display = "none";
    });

    // Toggle ph·∫ßn b√¨nh lu·∫≠n
    commentSection.style.display = commentSection.style.display === "none" ? "block" : "none";
  });
});

document.querySelectorAll(".submit-comment").forEach(button => {
  button.addEventListener("click", () => {
    const post = button.closest(".post");
    const input = post.querySelector(".comment-input");
    const commentList = post.querySelector(".comments-list");

    const commentText = input.value.trim();
    if (commentText) {
      const p = document.createElement("p");
      p.classList.add("comment-item");
      p.textContent = "B·∫°n: " + commentText;
      commentList.appendChild(p);
      input.value = "";
    }
  });
});
document.querySelectorAll(".comment-btn").forEach((btn, index) => {
  btn.addEventListener("click", () => {
    const post = btn.closest(".post");
    const section = post.querySelector(".comment-section");
    if (section) section.style.display = "block";
  });
});

function handleCommentVoiceCommand(transcript, posts) {
  if (!transcript.includes("b√¨nh lu·∫≠n")) return;

  const visiblePosts = Array.from(posts).filter(post => {
    const rect = post.getBoundingClientRect();
    return rect.top >= 0 && rect.bottom <= window.innerHeight;
  });

  visiblePosts.forEach((post, index) => {
    post.dataset.index = index + 1;
  });

  const matched = transcript.match(/b√¨nh lu·∫≠n(?: b√†i vi·∫øt)?(?: s·ªë)?\s*(\d+)/);

  if (visiblePosts.length === 1 && !matched) {
    const section = visiblePosts[0].querySelector(".comment-section");
    if (section) section.style.display = "block";
  } else if (matched) {
    const index = parseInt(matched[1]);
    const section = visiblePosts[index - 1]?.querySelector(".comment-section");
    if (section) section.style.display = "block";
  } else {
    alert("C√≥ nhi·ªÅu b√†i vi·∫øt. H√£y n√≥i r√µ s·ªë th·ª© t·ª± ƒë·ªÉ m·ªü b√¨nh lu·∫≠n.");
  }
}